<?php

namespace App\Providers;

use Designsensory\FormSchema\Contracts\FieldContract;
use Designsensory\FormSchema\Contracts\FormContract;
use Designsensory\FormSchema\Contracts\SubmissionContract;
use Designsensory\FormSchema\Exceptions\InvalidConfiguration;
use Designsensory\FormSchema\Models\Field;
use Designsensory\FormSchema\Models\Form;
use Designsensory\FormSchema\Models\Submission;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\ServiceProvider;

class FormSchemaServiceProvider extends ServiceProvider
{
    public static function determineFormModel(): string
    {
        $model = config('formschema.forms.model') ?? Form::class;

        if (! is_a($model, FormContract::class, true)
            || ! is_a($model, Model::class, true)) {
            throw InvalidConfiguration::modelIsNotValid($model);
        }

        return $model;
    }

    public static function determineFieldModel(): string
    {
        $model = config('formschema.fields.model') ?? Field::class;

        if (! is_a($model, FieldContract::class, true)
            || ! is_a($model, Model::class, true)) {
            throw InvalidConfiguration::modelIsNotValid($model);
        }

        return $model;
    }

    public static function determineSubmissionModel(): string
    {
        $model = config('formschema.submissions.model') ?? Submission::class;

        if (! is_a($model, SubmissionContract::class, true)
            || ! is_a($model, Model::class, true)) {
            throw InvalidConfiguration::modelIsNotValid($model);
        }

        return $model;
    }
}
